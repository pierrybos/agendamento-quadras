// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  type          String?   // "empresa" ou "cliente"
  role          String?   @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  empresaOwned  Empresa?  @relation("EmpresaOwner")
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Empresa {
  id      String   @id @default(cuid())
  name    String
  contact String
  userId  String   @unique
  owner   User     @relation("EmpresaOwner", fields: [userId], references: [id])
  quadras Quadra[]
}

model Quadra {
  id              String  @id @default(cuid())
  name            String
  location        String
  description     String?
  precoNormal     Float
  precoMensalista Float
  empresaId       String
  empresa         Empresa  @relation(fields: [empresaId], references: [id])
  agendamentos    Agendamento[]
  horarios        HorarioQuadra[]
}

model HorarioQuadra {
  id        String   @id @default(cuid())
  start     String
  end       String
  quadraId  String
  quadra    Quadra   @relation(fields: [quadraId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("horarios_quadra")
}

model Agendamento {
  id              String   @id @default(cuid())
  quadraId        String
  quadra          Quadra   @relation(fields: [quadraId], references: [id])
  dataInicio      DateTime
  dataFim         DateTime
  nomeCliente     String
  telefoneCliente String
  isWhatsapp      Boolean  @default(false)
  email           String?
  status          String   @default("pendente") // pendente, confirmado, pago
  tipo            String   @default("eventual") // eventual, mensal
  observacoes     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
